// Adr package provides adr generation commands using the adrgen tool
package adr

import (
	"bufio"
	"bytes"
	"os"
	"os/exec"
	"regexp"
	"strings"
	"time"

	"github.com/dustin/go-humanize"
	"github.com/magefile/mage/mg"
	"github.com/magefile/mage/sh"
	"github.com/olekukonko/tablewriter"
	"github.com/pterm/pterm"
	mtu "github.com/sheldonhull/magetools/pkg/magetoolsutils"
	"github.com/sheldonhull/magetools/pkg/req"
)

// Adr contains mage tasks related to managing ADRs.
type Adr mg.Namespace

// adrTargetDirectory is the default path for the ADR contents.
const adrTargetDirectory = "docs/adr"

// permissionUserReadWriteExecute sets permissions to all users/groups to edit markdown files produced in the target ADR directory.
const permissionUserReadWriteExecute = os.FileMode(0o777)

// adrReportFile provides the path to the summarized adr report file.
const adrReportFile = "docs/adr/adr-report.md"

// relTime returns just a simple relative time humanized, without the "ago" suffix.
func relTime(t time.Time) string {
	return strings.ReplaceAll(humanize.Time(t), " ago", "")
}

// ⚙️ Init installs the adr tool and ensures the target directory default is created and ready to go.
//
// To customize the target directory, set the ADR_TARGET_DIR environment variable.
func (Adr) Init() error {
	targetDirectory := getAdrTargetDirectory()
	pterm.Debug.Println("os.MkdirAll")
	if err := os.MkdirAll(targetDirectory, permissionUserReadWriteExecute); err != nil {
		return err
	}
	pterm.Debug.Println("attempting installation or resolution of binary path of adrgen")
	binary, err := req.ResolveBinaryByInstall("adrgen", "github.com/asiermarques/adrgen@latest")
	if err != nil {
		return err
	}
	if err := sh.Run(binary, "init", targetDirectory); err != nil {
		return err
	}
	return nil
}

// getAdrTargetDirectory checks for ADR_TARGET_DIR to be set as environment variable and if not provided returns the const adrTargetDirectory default value.
func getAdrTargetDirectory() string {
	target := os.Getenv("ADR_TARGET_DIR")
	if os.Getenv("ADR_TARGET_DIR") != "" {
		pterm.Info.Printfln("ADR_TARGET_DIR env variable provided with path of: %s", target)
		return strings.TrimSpace(os.Getenv("ADR_TARGET_DIR"))
	}
	pterm.Info.Printfln("ADR_TARGET_DIR env variable not found, setting adrTargetDirectory to: %s", adrTargetDirectory)
	return adrTargetDirectory
}

// getAdrReportFile checks for ADR_REPORT_FILE to be set as environment variable and if not provided returns the const adrReport default value.
func getAdrReportFile() string {
	target := os.Getenv("ADR_REPORT_FILE")
	if os.Getenv("ADR_REPORT_FILE") != "" {
		pterm.Info.Printfln("ADR_REPORT_FILE env variable provided with path of: %s", target)
		return strings.TrimSpace(os.Getenv("ADR_REPORT_FILE"))
	}
	pterm.Info.Printfln("ADR_REPORT_FILE env variable not found, setting adrTargetDirectory to: %s", adrReportFile)
	return adrReportFile
}

// 📘 Report rebuilds the ADR summary report page.
// If the binary isn't installed, it automatically does this too.
func (Adr) Report() error { //nolint:funlen // i'm ok leaving this a long function for now.
	binary, err := req.ResolveBinaryByInstall("adrgen", "github.com/asiermarques/adrgen@latest")
	if err != nil {
		return err
	}
	start := time.Now()
	mtu.CheckPtermDebug()
	b := bytes.Buffer{}
	c := exec.Command(binary, "list")
	c.Stdout = &b
	if err := c.Run(); err != nil {
		return err
	}
	pterm.Debug.Printf(b.String())
	scanner := bufio.NewScanner(strings.NewReader(b.String()))
	tableString := &strings.Builder{}
	tableString.WriteString(
		"# ADR Report\n\n> _Automatically generated by `mage adr:report`, do not edit manually_.\n\n",
	)
	table := tablewriter.NewWriter(tableString)
	table.SetBorders(tablewriter.Border{Left: true, Top: false, Right: true, Bottom: false})
	table.SetCenterSeparator("|")
	table.SetAutoWrapText(false)
	table.SetTablePadding(" ") // Pad with tabs.

	table.SetHeader([]string{"Title", "Status", "Date", "ID", "FileName"})
	// StartParsing := false.
	startParsing := false

	for scanner.Scan() {
		line := scanner.Text()

		line = strings.TrimSpace(line)
		if line == "" {
			pterm.Debug.Println("empty line")
			continue
		}
		line = strings.Trim(line, "|")

		if !startParsing {
			pterm.Debug.Printf("startParsing is: %v\n", startParsing)

			if strings.Contains(strings.ToLower(line), "title") {
				startParsing = true
				pterm.Debug.Printf("startParsing has been changed to: %v\n", startParsing)
				continue
			}
			continue
		}
		// Pterm.Debug.Printf("line: %q\n", line).
		r := regexp.MustCompile(`\s{2,100}`)
		result := r.ReplaceAllString(line, "|")
		pterm.Debug.Printf("%v\n", result)
		splitString := strings.Split(result, "|")
		table.Append(splitString)
	}
	table.Render() // Send output.
	filepath := getAdrReportFile()
	if err := os.WriteFile(filepath, []byte(tableString.String()), permissionUserReadWriteExecute); err != nil {
		pterm.Error.Printf("adrReportFile write [%s]\n", relTime(start))
		return err
	}
	pterm.Success.Printf("adrReportFile generated [%s]\n", relTime(start))

	return nil
}
